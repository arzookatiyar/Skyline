import java.io.*;
import java.util.*;

class SFS_FullSkyline {
    // ArrayList<Tuple> data = new ArrayList<Tuple>();
    TreeSet<Tuple> sortedData=new TreeSet<Tuple>(new Comp());
    
    public static ArrayList<Tuple> computeFullSkyline(String filename, boolean is_route) {
	/* Two types of files to compute skyline
	   1) ---> edges type node1, node2, distance, probability
	   2) ---> route found till present node1, distance, probability(route_id?)
	*/
	FileInputStream stream = new FileInputStream(filename);
	DataInputStream in = new DataInputStream(stream);
	BufferedReader br = new BufferedReader(new InputStreamReader(in));
	String strLine;
	if (is_route) {
	    while ((strLine=br.readLine())!=null) {
		String []strLinearray = strLine.split("\t");
		int node1 = Integer.parseInt(strLinearray[0]);
		int distance = Integer.parseInt(strLinearray[1]);
		double probability = Double.parseDouble(strLinearray[2]);
		Tuple t = new Tuple(node1, distance, probability);
		sortedData.add(t);
	    }
	}
	else {
	    while((strLine=br.readLine())!=null) {
		String []strLinearray = strLine.split("\t");
		int node1 = Integer.parseInt(strLinearray[0]);
		int node2 = Integer.parseInt(strLinearray[1]);
		int distance = Integer.parseInt(strLinearray[2]);
		double probability = Double.parseDouble(strLinearray[3]);
		Tuple t = new Tuple(node1, node2, distance, probability);
		sortedData.add(t);
	    }
	}
	
	Iterator it = sortedData.iterator();
	while(it.hasNext()) {
	    t = (Tuple)(it.next());
	    print_Tuple(t);
	}
	
	//now sortedData has the sorted data, we now want to calculate the skyline
	Iterator it1 = sortedData.iterator();
	ArrayList<Tuple> skyline = new ArrayList<Tuple>();
	skyline.add(it1.next());
	while (it1.hasNext()) {
	    Tuple test = it1.next();
	    if(is_skyline(test, skyline, true))
		skyline.add(test);
	}
	
	br.close();
	return skyline;
    }
    
    public static void main(String args[]) throwsIOException {
	
	
    }
}


class Comp implements Comparator {
    public int compare(Object first, Object second) {
	Tuple A = (Tuple)first;
	Tuple B = (Tuple)second;
	if (A.is_edge == true) {
	    //is the relation of the edges : for local skyline computation we need to take care of the join attribute as there are no local attribute, for skylines in general we need to take care of all the attributes (distance, prob, 
	    if (A.node_id2 == B.node_id2) {
		double entropy_funcA = A.distance + (1/A.probability);
		double entropy_funcB = B.distance + (1/B.probability);
		if (entropy_funcA>=entropy_funcB)
		    return -1;
		else
		    return 1;
	    }
	    else
		return -1;	    
	}
	else {
	    if (A.node_id1 == B.node_id1) {
		double entropy_funcA = A.distance + (1/A.probability);
		double entropy_funcB = B.distance + (1/B.probability);
		if (entropy_funcA>=entropy_funcB)
		    return -1;
		else
		    return 1;
	    }
	    else
		return -1;	    	    
	}
    }
}